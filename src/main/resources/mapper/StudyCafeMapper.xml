<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.bos.mapper.StudyCafeMapper">

  <select id="isExistsBookmark" resultType="boolean">
    SELECT EXISTS
    (
      SELECT id
      FROM bookmarks
      WHERE user_id = #{userId} AND
      study_cafe_id = #{studyCafeId}
    )
  </select>

  <select id="selectStudyCafesBySearchOption" resultType="kr.bos.model.dto.response.StudyCafeRes">
    SELECT study_cafes.id AS id, title, address, AVG(score) AS reviewAverage
    FROM study_cafes
    LEFT JOIN reviews ON study_cafes.id = reviews.study_cafe_id
    <where>
      <if test="keyword != null">
        title LIKE CONCAT(#{keyword}, '%')
      </if>
      <if test="isBookmark == true">
        AND study_cafes.id IN (SELECT study_cafe_id FROM bookmarks WHERE user_id = #{userId})
      </if>
      <if test="isMyStudyCafe == true">
        AND study_cafes.user_id = #{userId}
      </if>
    </where>
    GROUP BY reviews.study_cafe_id, study_cafes.id, title, address
    <if test='order.name.equals("RECENTLY")'>
      ORDER BY study_cafes.created_at
    </if>
    <if test='order.name.equals("NAME")'>
      ORDER BY study_cafes.title
    </if>
    <if test='order.name.equals("SCORE")'>
      ORDER BY reviewAverage
    </if>
    LIMIT #{offset}, #{limit}
  </select>

  <select id="selectStudyCafesCountsBySearchOption" resultType="long">
    SELECT COUNT(*)
    FROM study_cafes
    <where>
      <if test="keyword != null">
        title LIKE CONCAT(#{keyword}, '%')
      </if>
      <if test="isBookmark == true">
        AND study_cafes.id IN (SELECT study_cafe_id FROM bookmarks WHERE user_id = #{userId})
      </if>
      <if test="isMyStudyCafe == true">
        AND study_cafes.user_id = #{userId}
      </if>
    </where>
  </select>

  <select id="selectStudyCafeById" resultType="kr.bos.model.domain.StudyCafe">
    SELECT *
    FROM study_cafes
    WHERE id = #{studyCafeId}
  </select>

  <select id="selectStudyCafeDetailById" resultType="kr.bos.model.dto.response.StudyCafeDetailRes">
    SELECT reviews.study_cafe_id as id, title, address, thumbnail, AVG(score) as reviewAverage,
    (
      SELECT COUNT(*)
      FROM bookmarks
      WHERE bookmarks.study_cafe_id = reviews.study_cafe_id
      GROUP BY bookmarks.study_cafe_id
    ) AS bookmarkCount,
    (
      SELECT COUNT(*)
      FROM reservations
      WHERE room_id IN (
        SELECT id
        FROM rooms
        WHERE rooms.study_cafe_id = #{studyCafeId}
          AND end_time &lt;= now()
      )
    ) AS useCount
    FROM study_cafes
    RIGHT JOIN reviews ON study_cafes.id = reviews.study_cafe_id
    WHERE study_cafes.id = #{studyCafeId}
    GROUP BY reviews.study_cafe_id;
  </select>

  <insert id="insertStudyCafe" useGeneratedKeys="true" keyProperty="id">
    INSERT INTO study_cafes (user_id, title, address, thumbnail)
    VALUES (#{userId}, #{title}, #{address}, #{thumbnail})
  </insert>

  <insert id="insertBookmark" parameterType="long">
    INSERT INTO bookmarks (user_id, study_cafe_id)
    VALUES (#{userId}, #{studyCafeId})
  </insert>

  <delete id="deleteBookmark" parameterType="long">
    DELETE FROM bookmarks
    WHERE user_id = #{userId} AND study_cafe_id = #{studyCafeId}
  </delete>

  <delete id="deleteRoom" parameterType="long">
    DELETE FROM rooms
    WHERE id = #{roomId}
  </delete>

  <select id="isBlockUser" resultType="boolean" parameterType="long">
    SELECT EXISTS
    (
      SELECT id FROM blacklist
      WHERE user_id = #{userId} AND study_cafe_id = #{studyCafeId}
    )
  </select>
</mapper>

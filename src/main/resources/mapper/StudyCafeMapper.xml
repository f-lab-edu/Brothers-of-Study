<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.bos.mapper.StudyCafeMapper">

  <select id="selectStudyCafeById" resultType="kr.bos.model.domain.StudyCafe">
    SELECT *
    FROM study_cafes
    WHERE id = #{studyCafeId}
  </select>

  <insert id="insertStudyCafe" useGeneratedKeys="true" keyProperty="id">
    INSERT INTO study_cafes (user_id, title, address, thumbnail)
    VALUES (#{userId}, #{title}, #{address}, #{thumbnail})
  </insert>

  <insert id="insertBookmark" parameterType="long">
    INSERT INTO bookmarks (user_id, study_cafe_id)
    VALUES (#{userId}, #{studyCafeId})
  </insert>

  <delete id="deleteBookmark" parameterType="long">
    DELETE FROM bookmarks
    WHERE user_id = #{userId} AND study_cafe_id = #{studyCafeId}
  </delete>

  <delete id="deleteRoom" parameterType="long">
    DELETE FROM rooms
    WHERE id = #{roomId}
  </delete>

  <select id="isBlockUser" resultType="boolean" parameterType="long">
    SELECT EXISTS
    (
      SELECT id FROM blacklist
      WHERE user_id = #{userId} AND study_cafe_id = #{studyCafeId}
    )
  </select>

  <select id="getStudyCafeById" resultType="kr.bos.model.dto.response.StudyCafeRes">
    SELECT id, user_id, title, address, thumbnail, created_at, updated_at
    FROM STUDY_CAFES
    WHERE id=#{id}
  </select>

  <select id="getStudyCafesByKeyword" resultType="kr.bos.model.dto.response.StudyCafeRes">
    select      s.id, s.user_id, s.title, s.address, s.thumbnail, s.created_at, s.updated_at,
                r.reviewAverage,
                ifnull(bk.bookmarked, 0) bookmarked,
                room_cnt_tbl.empty_room_count,
                use_cnt_tbl.use_count

            from study_cafes s

                inner join (
                    select study_cafe_id, avg(score) as reviewAverage from reviews
                    group by study_cafe_id) r
                on r.study_cafe_id = s.id

                left outer join (
                    select id, study_cafe_id, user_id, count(*) as bookmarked from bookmarks
                    group by id) bk
                on bk.user_id = #{userId} and bk.study_cafe_id = s.id

                inner join (select distinct
                            rt.study_cafe_id,
                            rooms.capacity - rt.reservedCnt empty_room_count from
                                (select study_cafe_id, count(r.id) reservedCnt from rooms r
                                inner join reservations res on r.id = room_id
                                                        and now() between start_time and end_time
                                group by r.study_cafe_id) as rt, rooms
                            where rooms.study_cafe_id = rt.study_cafe_id) as room_cnt_tbl
                    on room_cnt_tbl.study_cafe_id = s.id

                inner join (
                    select r.study_cafe_id, sum(temp.room_used) use_count from rooms r
                            inner join (select room_id, count(room_id) room_used from
                                (select room_id from reservations where user_id = #{userId}) ret
                                group by room_id) temp
                            on temp.room_id = r.id
                            group by r.study_cafe_id) as user_cnt_tbl
                    on use_cnt_tbl.study_cafe_id = s.id

            WHERE STUDY_CAFES.title LIKE CONCAT('%', #{name}, '%'))
  </select>

  <select id="getStudyCafeIdByName" resultType="java.lang.Long">
    SELECT id FROM STUDY_CAFES WHERE title=#{name}
  </select>

  <update id="updateStudyCafe" parameterType="kr.bos.model.dto.request.StudyCafeReq">
    UPDATE STUDY_CAFES SET id=#{id}, user_id=#{userId}, title=#{title}, address=#{address},
                           thumbnail=#{thumbnail}, updated_at=NOW()
    WHERE id=#{id}
  </update>

  <delete id="deleteStudyCafe" parameterType="int">
    DELETE STUDY_CAFES FROM STUDY_CAFES WHERE id=#{id}
  </delete>
</mapper>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.bos.mapper.StudyCafeMapper">

  <select id="selectStudyCafeById" resultType="kr.bos.model.domain.StudyCafe">
    SELECT *
    FROM study_cafes
    WHERE id = #{studyCafeId}
  </select>

  <select id="selectStudyCafeDetailById" resultType="kr.bos.model.dto.response.StudyCafeDetailRes">
    SELECT reviews.study_cafe_id as id, title, address, thumbnail, AVG(score) as reviewAverage,
    (
      SELECT COUNT(*)
      FROM bookmarks
      WHERE bookmarks.study_cafe_id = reviews.study_cafe_id
      GROUP BY bookmarks.study_cafe_id
    ) AS bookmarkCount,
    (
      SELECT COUNT(*)
      FROM reservations
      WHERE room_id IN (
        SELECT id
        FROM rooms
        WHERE rooms.study_cafe_id = #{studyCafeId}
          AND end_time &lt;= now()
      )
    ) AS useCount
    FROM study_cafes
    RIGHT JOIN reviews ON study_cafes.id = reviews.study_cafe_id
    WHERE study_cafes.id = #{studyCafeId}
    GROUP BY reviews.study_cafe_id;
  </select>

  <insert id="insertStudyCafe" useGeneratedKeys="true" keyProperty="id">
    INSERT INTO study_cafes (user_id, title, address, thumbnail)
    VALUES (#{userId}, #{title}, #{address}, #{thumbnail})
  </insert>

  <insert id="insertBookmark" parameterType="long">
    INSERT INTO bookmarks (user_id, study_cafe_id)
    VALUES (#{userId}, #{studyCafeId})
  </insert>

  <delete id="deleteBookmark" parameterType="long">
    DELETE FROM bookmarks
    WHERE user_id = #{userId} AND study_cafe_id = #{studyCafeId}
  </delete>

  <delete id="deleteRoom" parameterType="long">
    DELETE FROM rooms
    WHERE id = #{roomId}
  </delete>

  <select id="isBlockUser" resultType="boolean" parameterType="long">
    SELECT EXISTS
    (
      SELECT id FROM blacklist
      WHERE user_id = #{userId} AND study_cafe_id = #{studyCafeId}
    )
  </select>

  <select id="getStudyCafeById" resultType="kr.bos.model.dto.response.StudyCafeRes">
    SELECT id, user_id, title, address, thumbnail, created_at, updated_at
    FROM STUDY_CAFES
    WHERE id=#{id}
  </select>

  <select id="getStudyCafesByKeyword" resultType="kr.bos.model.dto.response.StudyCafeRes">
    SELECT STUDY_CAFES.id,
           STUDY_CAFES.user_id,
           STUDY_CAFES.title,
           STUDY_CAFES.address,
           STUDY_CAFES.thumbnail,
           STUDY_CAFES.created_at,
           STUDY_CAFES.updated_at,
           REVIEWS.score AS reviewAverage,
           COUNT(BOOKMARKS.id) AS bookmarked,
           ROOMS.capacity - (
               SELECT COUNT(RESERVATIONS.id) FROM RESERVATIONS
                <![CDATA[
                     WHERE RESERVATIONS.room_id = ROOMS.id
                       AND (CURRENT_TIMESTAMP < RESERVATIONS.end_time)
                ]]>
               ) AS empty_room_count

            FROM STUDY_CAFES
                INNER JOIN REVIEWS
                ON REVIEWS.study_cafe_id = STIDY_CAFES.id

                LEFT JOIN BOOKMARKS AS BK
                ON BK.user_id = #{userId} AND BK.study_cafe_id = STUDY_CAFES.id

                INNER JOIN ROOMS
                ON ROOMS.study_cafe_id = STUDY_CAFES.id

            WHERE STUDY_CAFES.title LIKE CONCAT('%', #{name}, '%'))
  </select>

  <select id="getStudyCafeIdByName" resultType="java.lang.Long">
    SELECT id FROM STUDY_CAFES WHERE title=#{name}
  </select>

  <update id="updateStudyCafe" parameterType="kr.bos.model.dto.request.StudyCafeReq">
    UPDATE STUDY_CAFES SET id=#{id}, user_id=#{userId}, title=#{title}, address=#{address},
                           thumbnail=#{thumbnail}, updated_at=NOW()
    WHERE id=#{id}
  </update>

  <delete id="deleteStudyCafe" parameterType="int">
    DELETE STUDY_CAFES FROM STUDY_CAFES WHERE id=#{id}
  </delete>
</mapper>
